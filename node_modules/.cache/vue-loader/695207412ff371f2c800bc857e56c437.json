{"remainingRequest":"/Users/zbywjq/Desktop/cloudwork/VideoBatches/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zbywjq/Desktop/cloudwork/VideoBatches/src/views/edit/Playprograss.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/zbywjq/Desktop/cloudwork/VideoBatches/src/views/edit/Playprograss.vue","mtime":1596536680999},{"path":"/Users/zbywjq/Desktop/cloudwork/VideoBatches/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zbywjq/Desktop/cloudwork/VideoBatches/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/zbywjq/Desktop/cloudwork/VideoBatches/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/zbywjq/Desktop/cloudwork/VideoBatches/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zbywjq/Desktop/cloudwork/VideoBatches/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5iYXJ7Cgl3aWR0aDo1MDBweDsKCWhlaWdodDozMHB4OwoJbGluZS1oZWlnaHQ6MzBweDsKfQouYmFyIC5wcm9ncmVzc2JhcnsKCXdpZHRoOiA1MDBweDsKCWhlaWdodDoxMHB4OwoJYmFja2dyb3VuZC1jb2xvcjogIzk5OTk5OTsKCW1hcmdpbi10b3A6MTBweDsKCWJvcmRlci1yYWRpdXM6MzBweDsKCXBvc2l0aW9uOiByZWxhdGl2ZTsKfQouYmFyIC5ncmVlbmJhciB7Cgl3aWR0aDogMCU7CgloZWlnaHQ6MTBweDsKCWJvcmRlci1yYWRpdXM6MzBweCAxMHB4IDEwcHggMzBweDsKCWJvcmRlci1yaWdodDogMTBweCBzb2xpZCBibGFjazsKCXBvc2l0aW9uOiBhYnNvbHV0ZTsKCXRvcDogMDsKCWxlZnQ6IDA7CgliYWNrZ3JvdW5kLWNvbG9yOiAjMTI5NmRiOwp9Ci5idXR0b25fbWVudSB7CiAgICB3aWR0aDogMTUwcHg7CiAgICBoZWlnaHQ6IDUwcHg7CiAgICAgICAgICAgICAgICAgICAgCn0KCi5lbC1idXR0b257CiAgICB3aWR0aDogNTBweDsKICAgIGhlaWdodDogNDlweDsKICAgIGJhY2tncm91bmQ6cmdiYSgyNDIsIDI0MiwgMjQyLCAxKTsKICAgIGNvbG9yOmRhcmtncmV5OwogICAgZm9udC1zaXplOiAyM3B4OwogICAgYm9yZGVyLWNvbG9yOiByZ2JhKDI0MiwgMjQyLCAyNDIsIDEpOwp9Ci5lbC1idXR0b246aG92ZXJ7CiAgICBiYWNrZ3JvdW5kOiBwaW5rOwp9IAouZWwtYnV0dG9uKy5lbC1idXR0b24gewogICAgbWFyZ2luLWxlZnQ6IDBweDsgCn0gICAgCg=="},{"version":3,"sources":["Playprograss.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Playprograss.vue","sourceRoot":"src/views/edit","sourcesContent":["<template>\n\t<div id=\"play\" >\n        <video src=\"../../../public/movie2.mp4\"  ref=\"player\" ></video>\n        <div class=\"button_menu\">\n            <el-button type=\"primary\" size=\"mini\" icon=\"el-icon-arrow-left\" ></el-button> \n            <el-button type=\"primary\" size=\"mini\" :icon=\"status\" @click=\"audioState\" ></el-button> \n            <el-button type=\"primary\" size=\"mini\" icon=\"el-icon-arrow-right\"></el-button> \n        </div>\n        <p>已播放时间:{{cTime}}</p>\n        <p>总时间:{{dTime}}</p>\n        <div class=\"bar\">\n            <div class=\"progressbar\" ref=\"runfatbar\" @click=\"playMusic\">\n                <div class=\"greenbar\" ref=\"runbar\">\n                </div>\n\n            </div>\n        </div>\n    </div>\n\n</template>\n\n<script>\nexport default {\n        data(){\n\t\t\treturn{\n\t\t\t\tcTime:'00:00',\n            \tdTime:'00:00',\n            \tplay:false,\n            \tstatus:'el-icon-video-play'\n\t\t\t}\n            \n        },\n        mounted(){\n            const music = this.$refs.player;  \n            console.log(music)// 音频所在对象\n            const musicBar = this.$refs.runbar;  // 颜色进度条所在对象\n            const musicWidth = this.$refs.runfatbar.offsetWidth; // 底部进度条总宽\n\n            // 初始化音频信息\n            music.addEventListener('canplay', () => {\n                const musicTime = music.duration; // 获得音频时长\n                const branch = Math.floor(musicTime / 60); // 计算音频分钟\n                const second = Math.ceil(musicTime % 60); // 计算音频秒\n\n                if(branch < 10 && second < 10){  // 四种情况判断音频总时间\n                    this.dTime = `0${branch}:0${second}`;\n                }else if(branch < 10){\n                    this.dTime = `0${branch}:${second}`;\n                }else if(second < 10){\n                    this.dTime = `${branch}:0${second}`;\n                }else{\n                    this.dTime = `${branch}:${second}`;\n                }\n            })\n\n            // 音频正在播放\n            music.addEventListener('timeupdate',() => {\n                const musicTime = music.duration; // 获得音频时长\n                const stopTime = music.currentTime // 获得已播放的音频时长\n\n                musicBar.style.width = `${(stopTime / musicTime) * 100}%`; // 计算进度条所在比例宽度\n                const branch = Math.floor(stopTime / 60); // 计算已播放的音频分钟\n                const second = Math.floor(stopTime % 60); // 计算已播放的音频秒\n\n                if (branch < 10 && second < 10) { // 四种情况判断显示音频已播放时间\n                    this.cTime = `0${branch}:0${second}`;\n                } else if (branch < 10) {\n                    this.cTime = `0${branch}:${second}`;\n                } else if (second < 10) {\n                    this.cTime = `${branch}:0${second}`;\n                } else {\n                    this.cTime = `${branch}:${second}`;\n                }\n            })\n\n            // 移动端监听进度条触摸拖动\n            musicBar.addEventListener('touchmove',(event) => {\n                const events = event.targetTouches[0].pageX; // 获得触摸拖动的距离\n                musicBar.style.width = `${(events / musicWidth) * 100}%`; // 计算进度条所在比例宽度\n                music.pause(); // 触摸拖动时停止播放\n            })\n\n            // 移动端监听进度条触摸拖动结束\n            musicBar.addEventListener('touchend',() => {\n                const touwidth = (musicBar.offsetWidth / musicWidth); // 计算进度条所在比例\n                music.currentTime = music.duration * touwidth; // 通过所在比例赋值给音频应在的播放时间\n                music.pause(); // 根据播放时间开始播放\n                this.play = false; // 更改播放暂停按钮为播放\n            })\n        },\n        methods:{\n            // 播放暂停\n            audioState(){\n                this.play = !this.play;\n                const music = this.$refs.player;\n                if(this.play){\n                    music.play();\n                    this.status = 'el-icon-video-play';\n                    console.log('开始播放');\n                }else{\n                    music.pause();\n                    this.status = 'el-icon-video-pause';\n                    console.log('暂停播放');\n                }\n            },\n            // 点击进度条事件\n            playMusic(e){\n                const music = this.$refs.player; // 音频所在对象\n                const barWidth = e.pageX / this.$refs.runfatbar.offsetWidth; // 计算点击位置相对父元素总宽的比例\n                this.$refs.runbar.style.width = `${barWidth * 100}%`; // 进度条应所在的比例总宽\n                music.currentTime = music.duration * barWidth; // 计算点击时应播放所在的时间\n                music.pause(); // 播放音频\n                this.play = false; // 更改播放暂停按钮为播放\n            }\n        }\n    \n\n}\n</script>\n\n<style>\n.bar{\n\twidth:500px;\n\theight:30px;\n\tline-height:30px;\n}\n.bar .progressbar{\n\twidth: 500px;\n\theight:10px;\n\tbackground-color: #999999;\n\tmargin-top:10px;\n\tborder-radius:30px;\n\tposition: relative;\n}\n.bar .greenbar {\n\twidth: 0%;\n\theight:10px;\n\tborder-radius:30px 10px 10px 30px;\n\tborder-right: 10px solid black;\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbackground-color: #1296db;\n}\n.button_menu {\n    width: 150px;\n    height: 50px;\n                    \n}\n\n.el-button{\n    width: 50px;\n    height: 49px;\n    background:rgba(242, 242, 242, 1);\n    color:darkgrey;\n    font-size: 23px;\n    border-color: rgba(242, 242, 242, 1);\n}\n.el-button:hover{\n    background: pink;\n} \n.el-button+.el-button {\n    margin-left: 0px; \n}    \n</style>"]}]}